// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.fundatiacomunitarabucuresti.volunteer.domain;

import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import ro.fundatiacomunitarabucuresti.volunteer.domain.FacilitatorDataOnDemand;
import ro.fundatiacomunitarabucuresti.volunteer.domain.FacilitatorIntegrationTest;
import ro.fundatiacomunitarabucuresti.volunteer.services.FacilitatorService;

privileged aspect FacilitatorIntegrationTest_Roo_IntegrationTest {
    
    declare @type: FacilitatorIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: FacilitatorIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: FacilitatorIntegrationTest: @Transactional;
    
    @Autowired
    FacilitatorDataOnDemand FacilitatorIntegrationTest.dod;
    
    @Autowired
    FacilitatorService FacilitatorIntegrationTest.facilitatorService;
    
    @Test
    public void FacilitatorIntegrationTest.testCountAllFacilitators() {
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", dod.getRandomFacilitator());
        long count = facilitatorService.countAllFacilitators();
        Assert.assertTrue("Counter for 'Facilitator' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void FacilitatorIntegrationTest.testFindFacilitator() {
        Facilitator obj = dod.getRandomFacilitator();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to provide an identifier", id);
        obj = facilitatorService.findFacilitator(id);
        Assert.assertNotNull("Find method for 'Facilitator' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Facilitator' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void FacilitatorIntegrationTest.testFindAllFacilitators() {
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", dod.getRandomFacilitator());
        long count = facilitatorService.countAllFacilitators();
        Assert.assertTrue("Too expensive to perform a find all test for 'Facilitator', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Facilitator> result = facilitatorService.findAllFacilitators();
        Assert.assertNotNull("Find all method for 'Facilitator' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Facilitator' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void FacilitatorIntegrationTest.testFindFacilitatorEntries() {
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", dod.getRandomFacilitator());
        long count = facilitatorService.countAllFacilitators();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Facilitator> result = facilitatorService.findFacilitatorEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Facilitator' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Facilitator' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void FacilitatorIntegrationTest.testFlush() {
        Facilitator obj = dod.getRandomFacilitator();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to provide an identifier", id);
        obj = facilitatorService.findFacilitator(id);
        Assert.assertNotNull("Find method for 'Facilitator' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyFacilitator(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'Facilitator' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void FacilitatorIntegrationTest.testUpdateFacilitatorUpdate() {
        Facilitator obj = dod.getRandomFacilitator();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to provide an identifier", id);
        obj = facilitatorService.findFacilitator(id);
        boolean modified =  dod.modifyFacilitator(obj);
        Integer currentVersion = obj.getVersion();
        Facilitator merged = (Facilitator)facilitatorService.updateFacilitator(obj);
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'Facilitator' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void FacilitatorIntegrationTest.testSaveFacilitator() {
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", dod.getRandomFacilitator());
        Facilitator obj = dod.getNewTransientFacilitator(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Facilitator' identifier to be null", obj.getId());
        try {
            facilitatorService.saveFacilitator(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        obj.flush();
        Assert.assertNotNull("Expected 'Facilitator' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void FacilitatorIntegrationTest.testDeleteFacilitator() {
        Facilitator obj = dod.getRandomFacilitator();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Facilitator' failed to provide an identifier", id);
        obj = facilitatorService.findFacilitator(id);
        facilitatorService.deleteFacilitator(obj);
        obj.flush();
        Assert.assertNull("Failed to remove 'Facilitator' with identifier '" + id + "'", facilitatorService.findFacilitator(id));
    }
    
}
