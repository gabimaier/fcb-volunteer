// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.fundatiacomunitarabucuresti.volunteer.domain;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import ro.fundatiacomunitarabucuresti.volunteer.domain.Organization;
import ro.fundatiacomunitarabucuresti.volunteer.domain.Project;

privileged aspect Project_Roo_Finder {
    
    public static Long Project.countFindProjectsByOrganizationAndStartDateEqualsAndAcceptedNot(Organization organization, Date startDate, Boolean accepted) {
        if (organization == null) throw new IllegalArgumentException("The organization argument is required");
        if (startDate == null) throw new IllegalArgumentException("The startDate argument is required");
        if (accepted == null) throw new IllegalArgumentException("The accepted argument is required");
        EntityManager em = Project.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Project AS o WHERE o.organization = :organization AND o.startDate = :startDate  AND o.accepted IS NOT :accepted", Long.class);
        q.setParameter("organization", organization);
        q.setParameter("startDate", startDate);
        q.setParameter("accepted", accepted);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Project> Project.findProjectsByOrganizationAndStartDateEqualsAndAcceptedNot(Organization organization, Date startDate, Boolean accepted) {
        if (organization == null) throw new IllegalArgumentException("The organization argument is required");
        if (startDate == null) throw new IllegalArgumentException("The startDate argument is required");
        if (accepted == null) throw new IllegalArgumentException("The accepted argument is required");
        EntityManager em = Project.entityManager();
        TypedQuery<Project> q = em.createQuery("SELECT o FROM Project AS o WHERE o.organization = :organization AND o.startDate = :startDate  AND o.accepted IS NOT :accepted", Project.class);
        q.setParameter("organization", organization);
        q.setParameter("startDate", startDate);
        q.setParameter("accepted", accepted);
        return q;
    }
    
    public static TypedQuery<Project> Project.findProjectsByOrganizationAndStartDateEqualsAndAcceptedNot(Organization organization, Date startDate, Boolean accepted, String sortFieldName, String sortOrder) {
        if (organization == null) throw new IllegalArgumentException("The organization argument is required");
        if (startDate == null) throw new IllegalArgumentException("The startDate argument is required");
        if (accepted == null) throw new IllegalArgumentException("The accepted argument is required");
        EntityManager em = Project.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Project AS o WHERE o.organization = :organization AND o.startDate = :startDate  AND o.accepted IS NOT :accepted");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Project> q = em.createQuery(queryBuilder.toString(), Project.class);
        q.setParameter("organization", organization);
        q.setParameter("startDate", startDate);
        q.setParameter("accepted", accepted);
        return q;
    }
    
}
